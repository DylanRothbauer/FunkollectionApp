@page "/Profile"
@using FunkollectionApp.Services
@rendermode InteractiveServer
@inject IPopService PopService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudGrid Gutter="true">
        <!-- Profile Info Section -->
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardMedia Image="images/image-placeholder.jpg" Alt="Profile Picture" />
                <MudCardContent>
                    <MudText Typo="Typo.h6">User Name</MudText>
                    <MudText Typo="Typo.subtitle1">user@example.com</MudText>
                    <MudDivider Class="my-2" />
                    <MudText Typo="Typo.body1">Bio: Avid Funko Pop collector and enthusiast. Loves finding rare and exclusive Pops to add to the collection.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- User Stats Chart Section -->
        <MudItem xs="12" md="8">
            <MudPaper Class="p-3">
                <MudText Typo="Typo.h6" Class="mb-2">My Funko Pop Collection by Category</MudText>
                @if (loading)
                {
                    <MudProgressCircular Indeterminate="true" />
                }
                else if (Series.Count > 0)
                {
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" />
                }
                else
                {
                    <MudText>No data available to display.</MudText>
                }
            </MudPaper>
        </MudItem>

        <!-- Favorite Pops Section -->
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-2">Favorite Pops</MudText>
                    <MudList T="string">
                        <MudListItem>
                            <MudText Typo="Typo.subtitle1">Pop Name 1</MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText Typo="Typo.subtitle1">Pop Name 2</MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText Typo="Typo.subtitle1">Pop Name 3</MudText>
                        </MudListItem>
                        <!-- Replace with dynamic data -->
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ChartSeries> Series = new List<ChartSeries>();
    private string[] XAxisLabels;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        var userId = await GetCurrentUserId();
        if (!string.IsNullOrEmpty(userId))
        {
            var userPopsByCategory = await PopService.GetUserPopsByCategoryAsync(userId);
            if (userPopsByCategory != null)
            {
                PopulateChart(userPopsByCategory);
            }
        }
        else
        {
            Navigation.NavigateTo("/Account/Login");
        }
        loading = false;
    }

    private async Task<string> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            return userId;
        }

        return string.Empty;
    }

    private void PopulateChart(Dictionary<string, int> userPopsByCategory)
    {
        Series.Clear();
        var data = userPopsByCategory.Values.Select(v => (double)v).ToArray();
        var labels = userPopsByCategory.Keys.ToArray();

        Series.Add(new ChartSeries() { Name = "My Collection", Data = data });
        XAxisLabels = labels;
    }
}
