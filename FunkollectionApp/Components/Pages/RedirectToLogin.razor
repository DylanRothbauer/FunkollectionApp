@page "/RedirectToLogin"
@inject NavigationManager Navigation

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;

        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);

            // Check if we are already on the login page to prevent a loop
            if (!currentUrl.Contains("Account/Login", StringComparison.OrdinalIgnoreCase))
            {
                var returnUrl = Uri.EscapeDataString(currentUrl);
                if (string.IsNullOrWhiteSpace(returnUrl))
                {
                    Navigation.NavigateTo("Account/Login", true);
                }
                else
                {
                    Navigation.NavigateTo($"Account/Login?returnUrl={returnUrl}", true);
                }
            }
            // If already on the login page, do nothing to avoid loop
        }
    }
}
